Car.java
abstract class Car {
 public abstract void assembleParts();
 public abstract void paint();
 public abstract void allocateAccessories();
 public abstract void finalMakeup();

 
 public void buildCar()
{
 assembleParts();
 paint();
 allocateAccessories();
 finalMakeup();
 System.out.println("Car building process completed.\n");
 }
}
Hatchback.java
class Hatchback extends Car {
 @Override
 public void assembleParts() {
 System.out.println("Assembling parts for Hatchback.");
 }
 
 public void paint() {
 System.out.println("Painting Hatchback.");
 }
 
 public void allocateAccessories() {
 System.out.println("Allocating accessories for Hatchback.");
 }
 
 public void finalMakeup() {
 System.out.println("Final makeup for Hatchback.");
 }
}
Sedan.java
class Sedan extends Car {
 
 public void assembleParts() {
 System.out.println("Assembling parts for Sedan.");
 }
 
 public void paint() {
 System.out.println("Painting Sedan.");
 }
 
 public void allocateAccessories() {
 System.out.println("Allocating accessories for Sedan.");
 }
 
 public void finalMakeup() {
 System.out.println("Final makeup for Sedan.");
 }
}
SUV.java
class SUV extends Car {
 public void assembleParts() {
 System.out.println("Assembling parts for SUV.");
 }
 
 public void paint() {
 System.out.println("Painting SUV.");
 }
 
 public void allocateAccessories() {
 System.out.println("Allocating accessories for SUV.");
 }
 
 public void finalMakeup() {
 System.out.println("Final makeup for SUV.");
 }
}
CarFactory.java
class CarFactory {
 public static Car createCar(String carType) {
 if (carType == null) {
 return null;
 }
 if (carType.equalsIgnoreCase("Hatchback")) {
 return new Hatchback();
 } else if (carType.equalsIgnoreCase("Sedan")) {
 return new Sedan();
 } else if (carType.equalsIgnoreCase("SUV")) {
 return new SUV();
 }
 return null;
 }
}
TestFactory.java
public class TestFactoryPattern {
 public static void main(String[] args) {
 Car hatchback = CarFactory.createCar("Hatchback");
 if (hatchback != null) {
 System.out.println("Building a Hatchback:");
 hatchback.buildCar();
 }
 Car sedan = CarFactory.createCar("Sedan");
 if (sedan != null) {
 System.out.println("Building a Sedan:");
 sedan.buildCar();
 }
 Car suv = CarFactory.createCar("SUV");
 if (suv != null) {
 System.out.println("Building an SUV:");
 suv.buildCar();
 }
 }
}